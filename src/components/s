import React, { useState } from 'react';

const DubbingRequirements = () => {
  const [checkboxes, setCheckboxes] = useState({
    aiVoiceover: false,
    voiceMatch: false,
    lipMatch: false,
    premixFiles: false,
    meFiles: false,
    soundBalancing: false,
  });

  const [openClosed, setOpenClosed] = useState('open');
  const [captionType, setCaptionType] = useState('closed');
  const [numberOfFiles, setNumberOfFiles] = useState(0);
  const [duration, setDuration] = useState(0);
  const [deadline, setDeadline] = useState('');
  const [languagePair, setLanguagePair] = useState('English to Spanish');
  const [targetDialect, setTargetDialect] = useState('Mexican Spanish'); // Default value
  const [maleFemale, setMaleFemale] = useState({
    male: false,
    female: false,
    both: false,
  });
  const [outputFormat, setOutputFormat] = useState('mp3');
  const [deliverableType, setDeliverableType] = useState('low-res');
  const [meFilesShared, setMeFilesShared] = useState(false);
  const [onScreenEditing, setOnScreenEditing] = useState(false);
  const [openProjectFiles, setOpenProjectFiles] = useState(false);

  const [formData, setFormData] = useState(null);

  const handleCheckboxChange = (e) => {
    const { name, checked } = e.target;
    setCheckboxes((prev) => ({
      ...prev,
      [name]: checked,
    }));
  };

  const handleOpenClosedChange = (e) => {
    setOpenClosed(e.target.value);
  };

  const handleCaptionTypeChange = (e) => {
    setCaptionType(e.target.value);
  };

  const handleNumberOfFilesChange = (e) => {
    setNumberOfFiles(e.target.value);
  };

  const handleDurationChange = (e) => {
    setDuration(e.target.value);
  };

  const handleDeadlineChange = (e) => {
    setDeadline(e.target.value);
  };

  const handleLanguagePairChange = (e) => {
    setLanguagePair(e.target.value);
  };

  const handleTargetDialectChange = (e) => {
    setTargetDialect(e.target.value);
  };

  const handleMaleFemaleChange = (e) => {
    const { name, checked } = e.target;
    setMaleFemale((prev) => ({
      ...prev,
      [name]: checked,
    }));
  };

  const handleOutputFormatChange = (e) => {
    setOutputFormat(e.target.value);
  };

  const handleDeliverableTypeChange = (e) => {
    setDeliverableType(e.target.value);
  };

  const handleMeFilesSharedChange = (e) => {
    setMeFilesShared(e.target.checked);
  };

  const handleOnScreenEditingChange = (e) => {
    setOnScreenEditing(e.target.checked);
  };

  const handleOpenProjectFilesChange = (e) => {
    setOpenProjectFiles(e.target.checked);
  };

  const handleSubmit = (e) => {
    e.preventDefault();

    const collectedFormData = {
      checkboxes,
      openClosed,
      captionType,
      numberOfFiles,
      duration,
      deadline,
      languagePair,
      targetDialect, // Add targetDialect to formData
      maleFemale,
      outputFormat,
      deliverableType,
      meFilesShared,
      onScreenEditing,
      openProjectFiles,
    };

    setFormData(collectedFormData);
  };

  return (
    <div>
      <form onSubmit={handleSubmit} className="mb-6">
        <h3 className="text-xl font-semibold mb-2">AI Dubbing Requirements</h3>

        {/* Service Type, Checkbox Options, and other fields */}
        <div className="mb-4 p-4 border rounded bg-white shadow">
          <label className="block mb-2">Service Type</label>
          <select className="w-full border p-2 rounded mb-4">
            <option>Dubbing</option>
            <option>Voiceover</option>
            <option>Translation</option>
          </select>
        </div>

        <div className="mb-4 p-4 border rounded bg-white shadow">
          <h4 className="font-semibold mb-2">Checkbox Options</h4>
          <label className="block mb-2">
            <input
              type="checkbox"
              name="aiVoiceover"
              checked={checkboxes.aiVoiceover}
              onChange={handleCheckboxChange}
              className="mr-2"
            />
            AI Voiceover
          </label>
        </div>

        <div className="mb-4 p-4 border rounded bg-white shadow">
          <label className="block mb-2">Number of Files and Duration</label>
          <div className="flex space-x-4">
            <div className="flex-1">
              <input
                type="number"
                value={numberOfFiles}
                onChange={handleNumberOfFilesChange}
                className="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5"
                placeholder="Number of Files"
              />
            </div>
            <div className="flex-1">
              <input
                type="number"
                value={duration}
                onChange={handleDurationChange}
                className="bg-gray-50 border border-gray-300 text-gray-900 text-sm rounded-lg focus:ring-blue-500 focus:border-blue-500 block w-full p-2.5"
                placeholder="Duration"
              />
            </div>
          </div>
        </div>

        {/* Language Pair and Target Dialect */}
        <div className="mb-4 p-4 border rounded bg-white shadow">
          <label className="block mb-2">Language Pair</label>
          <select className="w-full border p-2 rounded mb-4" onChange={handleLanguagePairChange}>
            <option>English to Spanish</option>
            <option>English to French</option>
            <option>English to German</option>
          </select>
        </div>

        {/* <div className="mb-4 p-4 border rounded bg-white shadow">
          <label className="block mb-2">Target Language Dialect</label>
          <select
            className="w-full border p-2 rounded mb-4"
            value={targetDialect}
            onChange={handleTargetDialectChange}
          >
            <option value="Mexican Spanish">Mexican Spanish</option>
            <option value="Castilian Spanish">Castilian Spanish</option>
          </select>
        </div> */}

<div className="mb-4 p-4 border rounded bg-white shadow">
  <label className="block mb-2">Target Language Dialect</label>
  <select
    className="w-full border p-2 rounded mb-4"
    value={targetDialect}
    onChange={(e) => setTargetDialect(e.target.value)}
  >
    <option value="Mexican Spanish">Mexican Spanish</option>
    <option value="Castilian Spanish">Castilian Spanish</option>
  </select>
</div>

        {/* Male/Female Voice and Output Format */}
        <div className="mb-4 p-4 border rounded bg-white shadow">
          <label className="block mb-2">Male/Female Voice</label>
          <div className="flex items-center">
            <label className="mr-4">
              <input
                type="checkbox"
                name="male"
                checked={maleFemale.male}
                onChange={handleMaleFemaleChange}
                className="mr-2"
              />
              Male
            </label>
            <label className="mr-4">
              <input
                type="checkbox"
                name="female"
                checked={maleFemale.female}
                onChange={handleMaleFemaleChange}
                className="mr-2"
              />
              Female
            </label>
            <label>
              <input
                type="checkbox"
                name="both"
                checked={maleFemale.both}
                onChange={handleMaleFemaleChange}
                className="mr-2"
              />
              Both
            </label>
          </div>
        </div>

        <div className="mb-4 p-4 border rounded bg-white shadow">
          <label className="block mb-2">Output Format</label>
          <select
            className="w-full border p-2 rounded mb-4"
            value={outputFormat}
            onChange={handleOutputFormatChange}
          >
            <option>mp3</option>
            <option>mp4</option>
            <option>wav</option>
            <option>srt</option>
            <option>vtt</option>
          </select>
        </div>

        {/* Deliverable Type */}
        <div className="mb-4 p-4 border rounded bg-white shadow">
          <label className="block mb-2">Deliverable Type</label>
          <select
            className="w-full border p-2 rounded mb-4"
            value={deliverableType}
            onChange={handleDeliverableTypeChange}
          >
            <option>low-res</option>
            <option>high-res</option>
          </select>
        </div>

        {/* Submit Button */}
        <button
          type="submit"
          className="mt-6 bg-blue-600 text-white px-4 py-2 rounded"
        >
          Submit
        </button>
      </form>

      {/* Displaying Data After Submission */}
      {formData && (
  <div className="mt-6">
    <h3 className="text-xl font-semibold mb-4">Form Data:</h3>
    <table className="w-full table-auto border-collapse border rounded">
      <thead>
        <tr className="bg-gray-200">
          <th className="border px-4 py-2">Field</th>
          <th className="border px-4 py-2">Value</th>
        </tr>
      </thead>
      <tbody>
        <tr>
          <td className="border px-4 py-2">Language Pair</td>
          <td className="border px-4 py-2">{formData.languagePair}</td>
        </tr>
        <tr>
          <td className="border px-4 py-2">Target Language Dialect</td>
          <td className="border px-4 py-2">{formData.targetDialect}</td>
        </tr>
        <tr>
                <td className="border px-4 py-2">Number of Files</td>
                <td className="border px-4 py-2">{formData.numberOfFiles}</td>
              </tr>
              <tr>
                <td className="border px-4 py-2">Duration</td>
                <td className="border px-4 py-2">{formData.duration}</td>
              </tr>
              <tr>
                <td className="border px-4 py-2">Deadline</td>
                <td className="border px-4 py-2">{formData.deadline}</td>
              </tr>
              <tr>
                <td className="border px-4 py-2">Male/Female</td>
                <td className="border px-4 py-2">
                  {formData.maleFemale.male && 'Male '}
                  {formData.maleFemale.female && 'Female '}
                  {formData.maleFemale.both && 'Both'}
                </td>
              </tr>
              <tr>
                <td className="border px-4 py-2">Output Format</td>
                <td className="border px-4 py-2">{formData.outputFormat}</td>
              </tr>
              <tr>
                <td className="border px-4 py-2">Deliverable Type</td>
                <td className="border px-4 py-2">{formData.deliverableType}</td>
              </tr>
              <tr>
                <td className="border px-4 py-2">M&E Files Shared</td>
                <td className="border px-4 py-2">
                  {formData.meFilesShared ? 'Yes' : 'No'}
                </td>
              </tr>
            </tbody>
          </table>
        </div>
      )}
    </div>
  );
};

export default DubbingRequirements;
